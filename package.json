{
	"name": "z80-debug",
	"displayName": "Z80 Debugger",
	"version": "0.7.0",
	"publisher": "maziac",
	"description": "A debug adapter for use with the ZEsarUX ZX Spectrum Emulator.",
	"author": {
		"name": "Thomas Busse"
	},
	"license": "MIT",
	"keywords": [
		"debugger",
		"z80",
		"zesarux",
		"zx spectrum"
	],
	"engines": {
		"vscode": "^1.30.0",
		"node": "^7.9.0"
	},
	"icon": "images/z80-debug-icon.png",
	"categories": [
		"Debuggers"
	],
	"private": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/maziac/z80-debug"
	},
	"scripts": {
		"prepublish": "tsc -p ./src",
		"compile": "tsc -p ./src",
		"tslint": "tslint ./src/**/*.ts",
		"watch": "tsc -w -p ./src",
		"test": "mocha -u tdd ./out/tests/",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"package": "vsce package",
		"publish": "vsce publish"
	},
	"files": [],
	"dependencies": {
		"await-notify": "1.0.1",
		"binary-file": "^0.2.1",
		"gif-writer": "^0.9.3",
		"mocha": "^5.2.0",
		"ts-node": "^7.0.1",
		"vscode": "^1.1.26",
		"vscode-debugadapter": "1.33.0",
		"vscode-debugprotocol": "1.33.0"
	},
	"devDependencies": {
		"@types/mocha": "5.2.5",
		"@types/node": "10.12.18",
		"tslint": "5.12.0",
		"typescript": "3.2.2",
		"vsce": "1.54.0",
		"vscode-debugadapter-testsupport": "1.33.0"
	},
	"main": "./out/extension",
	"activationEvents": [
		"onDebug"
	],
	"contributes": {
		"breakpoints": [
			{
				"language": "z80-macroasm"
			},
			{
				"language": "z80-asm"
			},
			{
				"language": "zeus-asm"
			},
			{
				"language": "gbz80"
			},
			{
				"language": "pasmo"
			}
		],
		"commands": [
			{
				"command": "extension.z80-debug.movePCtoCursor",
				"title": "Move Program Counter to Cursor",
				"category": "z80-debug"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == asm-collection",
					"command": "extension.z80-debug.movePCtoCursor",
					"group": "debug"
				}
			]
		},
		"debuggers": [
			{
				"type": "z80-debug",
				"label": "Z80 Debugger",
				"program": "./out/emuldebugadapter.js",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"required": [
							"zport",
							"zhostname"
						],
						"properties": {
							"zhostname": {
								"type": "string",
								"description": "The hostname/IP address of the Zesarux Debugger."
							},
							"zport": {
								"type": "number",
								"description": "The port of the Zesarux Debugger."
							},
							"rootFolder": {
								"type": "string",
								"description": "The path of the root folder. All other paths are relative to this. Ususally set to ${workspaceFolder}."
							},
							"listFiles": {
								"type": "array",
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"items": {
									"anyOf": [
										{
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										{
											"type": "object",
											"properties": {
												"path": {
													"type": "string",
													"description": "Path to the assembler .list file."
												},
												"mainFile": {
													"type": "string",
													"description": "Path to the main assembler source file that was used to produce the .list file. For 'z80asm' the name is extracted automatically (i.e. not needed), for 'sjasmplus' and 'z88dk' you can provide the source file name here.",
													"default": null
												},
												"srcDirs": {
													"type": "array",
													"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here either as an array of strings. All dirs are relative to the 'rootFolder'.",
													"default": [
														""
													]
												},
												"filter": {
													"type": "string",
													"description": "You can add a filter with a regular expression here. On reading of the .list file the regular expression is applied on every line. This can be used e.g. to turn a list file of an unsupported assembler into a format that is understood by z80-debug. Can be omitted.\nExample: '/^[0-9]+\\s+//'. The line number at the start of each line is deleted.\nIs not required for 'z80asm', 'sjasmplus' or 'z88dk'.",
													"default": null
												},
												"asm": {
													"type": "string",
													"description": "The used assembler. 'z80asm' (default), 'sjasmplus' or 'z88dk'.",
													"default": "z80asm"
												},
												"addOffset": {
													"type": "number",
													"description": "To add an offset to each address in the .list file. Could be used if the addresses in the list file do not start at the ORG (as with z88dk).",
													"default": 0
												}
											}
										}
									]
								}
							},
							"smallValuesMaximum": {
								"type": "number",
								"description": "Interpretes labels as address if value is bigger. Typically this is e.g. 512. So all numbers below are not treated as addresses if shown. So most constant values are covered with this as they are usually smaller than 512. Influences the formatting.",
								"default": 512
							},
							"disassemblerArgs": {
								"description": "Arguments passed to the disassembler.",
								"properties": {
									"esxdosRst": {
										"type": "boolean",
										"description": "For esxdos disassembly set this to 'true'."
									}
								}
							},
							"tmpDir": {
								"type": "string",
								"description": "A directory for temporary files created by this debug adapter. Used e.g. for disassemblies. E.g. '.tmp'"
							},
							"topOfStack": {
								"type": "string",
								"description": "(Optional) You should set this to the label or address which is above the topmost entry on the stack. It is used to determine the end of the call stack."
							},
							"load": {
								"type": "string",
								"description": "(Optional) Load a .tap or .sna file into the emulator on startup of the debug session."
							},
							"startAutomatically": {
								"type": "boolean",
								"description": "Start automatically after launch."
							},
							"resetOnLaunch": {
								"type": "boolean",
								"description": "Resets the cpu (on emulator) after starting the debugger before starting the program to debug."
							},
							"commandsAfterLaunch": {
								"type": "array",
								"description": "An array with commands that are executed after the program-to-debug is loaded. With '-e' or '-exec' you can pass commands to the debugger directly.",
								"items": {
									"type": "string"
								}
							},
							"skipInterrupt": {
								"type": "boolean",
								"description": "Skips the interrupt during stepping."
							},
							"formatting": {
								"registerVarFormat": {
									"type": "array",
									"description": "Defines the formatting of the registers when displayed in the VARIABLES area. E.g. as hex value or as integer. Also allows to display labels and various other formats. Use:\n${name} = the name of the register, e.g. HL\n${hex} = value as hex, e.g. A9F5\n${unsigned} = value as unsigned, e.g. 1234\n$(signed) = value as signed, e.g. -59\n$(bits) = value as bits , e.g. 10011011\n$(flags) = value interpreted as status flags (only useful for Fand F#), e.g. ZNC\n${labels} = value as label (or several labels)\n{labelsplus} = value as label (or several labels) plus an index/offset\n${pre:labels:join} = value as label (or several labels). If no label is found nothing is printed. If at leat 1 label is found the 'pre' string is printed followed by the label(s). If more than 1 label is found they are concatenated with the 'join' string.\n${b@:...} = This prefix to hex, unsigned, signed or bits allows to show the memory content of the value, i.e. it uses the value as address and shows it's contents. E.g. you can use ${b@:bits} to show the memory contents of the address the register is pointing at as a bit value.",
									"items": {
										"type": "string"
									}
								},
								"registerHoverFormat": {
									"type": "array",
									"description": "see registerVarFormat. Format when hovering over a register",
									"items": {
										"type": "string"
									}
								},
								"arrayByteFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for BYTEs in the WATCHES area and when hovering."
								},
								"arrayWordFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for WORDs in the WATCHES area and when hovering."
								},
								"stackVarFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the pushed values in the STACK area."
								}
							},
							"memoryViewer": {
								"addressColor": {
									"type": "string",
									"description": "The text color of the address field."
								},
								"bytesColor": {
									"type": "string",
									"descdescription": "The color of the bytes shown in hex."
								},
								"asciiColor": {
									"type": "string",
									"descdescription": "The text color of the ascii field."
								},
								"addressHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the address when hovering."
								},
								"valueHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the value when hovering."
								},
								"registerPointerColors": {
									"type": "array",
									"description": "An array with register/color pairs. All selected register will appear with the corresponden color in the memory view. Registers not chosen will not appear.",
									"items": [
										{
											"type": "string"
										},
										{
											"type": "string"
										}
									],
									"default":  [
										"HL", "darkgreen",
										"DE", "darkcyan",
										"BC", "dimgray",
										"IX", "darkorange",
										"IY", "darkviolet"
									]
								},
								"registersMemoryView": {
									"type": "array",
									"description": "An array of register to show in the register memory view. This view is automatically opened at startup and shows the memory the registers point to. E.g. [ 'HL', 'DE', 'IX' ].",
									"items": {
										"type": "string"
									},
									"default": [ "HL", "DE", "BC", "IX", "IY" ]
								}
							},
							"socketTimeout": {
								"type": "number",
								"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value."
							},
							"log": {
								"description": "(Optional) Configuration of the general logging.",
								"properties": {
									"channelOutputEnabled": {
										"type": "boolean",
										"description": "If true loging is done to channel 'Z80 Debugger'."
									},
									"filePath": {
										"type": "string",
										"description": "The relative filepath for the logs. If undefined no logging to a file is done."
									}
								}
							},
							"logSocket": {
								"description": "(Optional) Configuration of the socket logging.",
								"properties": {
									"channelOutputEnabled": {
										"type": "boolean",
										"description": "If true loging is done to channel 'Z80 Debugger Socket'."
									},
									"filePath": {
										"type": "string",
										"description": "The relative filepath for the logs. If undefined no logging to a file is done."
									}
								}
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Z80 Debugger: Launch",
						"description": "Configuration for the Z80 Debugger.",
						"body": {
							"type": "z80-debug",
							"request": "launch",
							"name": "Z80 Debugger",
							"zhostname": "localhost",
							"zport": 10000,
							"topOfStack": "stack_top",
							"listFiles": [
								{
									"path": "path_to_your_assembler_file.list",
									"sources": ""
								}
							],
							"disassemblerArgs": {
								"esxdosRst": true
							},
							"labelsFiles": [
								"path_to_your_assembler_file.labels"
							],
							"load": "path_to_your_sna_file.sna",
							"skipInterrupt": true
						}
					}
				]
			}
		]
	}
}
